/* 날짜별 매출과 평균 구매액을 집계하는 방법 */
SELECT * FROM PURCHASE_LOG;

SELECT DT, COUNT(*) AS PURCHASE_COUNT, SUM(PURCHASE_AMOUNT) AS TOTAL_AMOUNT, ROUND(AVG(PURCHASE_AMOUNT), 2) AS AVG_AMOUNT
FROM PURCHASE_LOG
GROUP BY DT
ORDER BY DT
;

/* 날짜별 매출과 7일 이동평균을 집계하는 방법 */
SELECT DT, SUM(PURCHASE_AMOUNT) AS TOTAL_AMOUNT, 
    CASE 
        WHEN COUNT(*) OVER(ORDER BY DT ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) = 7 
        THEN AVG(SUM(PURCHASE_AMOUNT)) OVER(ORDER BY DT ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) END AS SEVEN_DAU_MOVING_AVG 
    
FROM PURCHASE_LOG 
GROUP BY DT 
ORDER BY DT; 

/* 월 매출과 월 매출 누계 구하는 방법 */
SELECT * FROM PURCHASE_LOG;

WITH MONTH_TOTAL_AMOUNT 
AS(SELECT DT, SUBSTR(DT, 1, 7) AS YEAR_MONTH ,SUM(PURCHASE_AMOUNT) AS MONTH_TOTAL FROM PURCHASE_LOG GROUP BY DT ORDER BY DT)
SELECT DT, YEAR_MONTH, MONTH_TOTAL, SUM(MONTH_TOTAL) OVER(PARTITION BY YEAR_MONTH ORDER BY YEAR_MONTH ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AGG_AMOUNT FROM MONTH_TOTAL_AMOUNT;

/* 날짜별 매출을 조회를 좀 더 보기 좋게 나타내는 방법(즉, 년, 월, 일 컬럼을 따로 제작하는 방법)(해당 SQL의 결과를 'daily_purchase'라 명명함) */
SELECT * FROM PURCHASE_LOG;

WITH PURCHASE_AMOUNT_BY_MONTH AS
(
SELECT DT, SUM(PURCHASE_AMOUNT) AS PURCHASE_AMOUNT 
FROM PURCHASE_LOG 
GROUP BY DT 
ORDER BY DT
) 
SELECT DT, SUBSTR(DT, 1, 4) AS YEAR, SUBSTR(DT, 6, 2) AS MONTH, SUBSTR(DT, 9, 2) AS DATE_, PURCHASE_AMOUNT 
FROM PURCHASE_AMOUNT_BY_MONTH;

/* daily_purchase(위 sql의 결과)로부터 월별 매출 누계를 구하는 방법*/
WITH PURCHASE_AMOUNT_BY_MONTH AS
(
SELECT DT, SUM(PURCHASE_AMOUNT) AS PURCHASE_AMOUNT 
FROM PURCHASE_LOG 
GROUP BY DT 
ORDER BY DT
),
DAILY_PURCHASE AS 
(
SELECT DT, SUBSTR(DT, 1, 4) AS YEAR, SUBSTR(DT, 6, 2) AS MONTH, SUBSTR(DT, 9, 2) AS DATE_, PURCHASE_AMOUNT 
FROM PURCHASE_AMOUNT_BY_MONTH
),
MONTH_PURCHASE AS
(
SELECT DT, YEAR||'-'||MONTH AS YEAR_MONTH, PURCHASE_AMOUNT FROM DAILY_PURCHASE
) SELECT DT, YEAR_MONTH, PURCHASE_AMOUNT, SUM(PURCHASE_AMOUNT) OVER(PARTITION BY YEAR_MONTH ORDER BY YEAR_MONTH ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS AGG_AMNOUNT_BY_MONTH FROM MONTH_PURCHASE;

/* SUM(CASE ~)예시 */
CREATE TABLE SUM_CASE_TEST
(
MAIN_NAME VARCHAR2(20),
SUB_NAME VARCHAR2(20),
AMOUNT INTEGER
);

INSERT INTO SUM_CASE_TEST VALUES('A', 'a', 1);
INSERT INTO SUM_CASE_TEST VALUES('A', 'a', 10);
INSERT INTO SUM_CASE_TEST VALUES('A', 'b', 2);
INSERT INTO SUM_CASE_TEST VALUES('B', 'a', 3);
INSERT INTO SUM_CASE_TEST VALUES('B', 'b', 4);

SELECT * FROM SUM_CASE_TEST;

SELECT MAIN_NAME, SUM(CASE WHEN SUB_NAME = 'a' THEN AMOUNT END) AS SUM_CASE FROM SUM_CASE_TEST GROUP BY MAIN_NAME ORDER BY MAIN_NAME;

/* 월별 매출 작대비 구하기(SUM(CASE ~)활용법) */
WITH PURCHASE_AMOUNT_BY_MONTH AS
(
SELECT DT, SUM(PURCHASE_AMOUNT) AS PURCHASE_AMOUNT 
FROM PURCHASE_LOG_14_15 
GROUP BY DT 
ORDER BY DT
),
DAILY_PURCHASE AS 
(
SELECT DT, SUBSTR(DT, 1, 4) AS YEAR, SUBSTR(DT, 6, 2) AS MONTH, SUBSTR(DT, 9, 2) AS DATE_, PURCHASE_AMOUNT 
FROM PURCHASE_AMOUNT_BY_MONTH
),
MST_MONTH AS
(
SELECT DISTINCT SUBSTR(DT, 6, 2) AS MONTH 
FROM PURCHASE_AMOUNT_BY_MONTH ORDER BY MONTH
),
AMOUNT_14_15_BY_MONTH AS
(
SELECT MONTH, SUM(CASE WHEN YEAR = '2014' THEN PURCHASE_AMOUNT END) AS AMOUNT_2014, SUM(CASE WHEN YEAR = '2015' THEN PURCHASE_AMOUNT END) AS AMOUNT_2015 
FROM DAILY_PURCHASE 
GROUP BY MONTH 
ORDER BY MONTH
) SELECT MONTH, AMOUNT_2014, AMOUNT_2015, ROUND((AMOUNT_2015/AMOUNT_2014) * 100) AS RATE FROM AMOUNT_14_15_BY_MONTH;

/* 2015년 매출에 대한 Z 차트를 작성하는 방법 */
WITH PURCHASE_AMOUNT_BY_MONTH AS
(
SELECT DT, SUM(PURCHASE_AMOUNT) AS PURCHASE_AMOUNT 
FROM PURCHASE_LOG_14_15 
GROUP BY DT 
ORDER BY DT
),
DAILY_PURCHASE AS 
(
SELECT DT, SUBSTR(DT, 1, 4) AS YEAR, SUBSTR(DT, 6, 2) AS MONTH, SUBSTR(DT, 9, 2) AS DATE_, PURCHASE_AMOUNT 
FROM PURCHASE_AMOUNT_BY_MONTH
),
MONTHLY_AMOUNT AS
(
SELECT YEAR, MONTH, SUM(PURCHASE_AMOUNT) AS YEAR_MONTH_AMOUNT FROM DAILY_PURCHASE GROUP BY YEAR, MONTH ORDER BY YEAR, MONTH
),
calc_index AS
(
SELECT YEAR, MONTH, YEAR_MONTH_AMOUNT, SUM(CASE WHEN YEAR = '2015' THEN YEAR_MONTH_AMOUNT END) OVER(ORDER BY YEAR, MONTH, ROWS UNBOUNDED PRECEDING) AS AGG_AMOUNT FROM 
)









